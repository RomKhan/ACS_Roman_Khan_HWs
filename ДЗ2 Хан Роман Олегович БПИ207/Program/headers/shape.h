#ifndef __shape__
#define __shape__

#include <stdio.h>
#include "random.h"
#include <stdbool.h>

/**
 * Перечисление цветов.
 * Созда для придания осмесленности числовым значениям цетов.
 */
enum Colors {
    RED,
    ORANGE,
    YELLOW,
    GREEN,
    LIGHTBLUE,
    BLUE,
    PURPLE,
    TRANSPARENT
};

/**
 * Абстрактный класс фигуры.
 * Содержит базовую спецификацию любой фигуры.
 */
class Shape {
    /**
     * Общее для всех алтернатив свйоство - цвет.
     */
    Colors color;
public:
    /**
     * Деструктор абстрактной фигуры.
     */
    virtual ~Shape() = default;

    /**
     * Статический ввод фигуры.
     * На основе полученных данных из файла программа генерирует одну из альтернатив.
     * @param inputFile - файл, из которого происходит чтение.
     * @return Возвращает обобщенный экземпляр фигуры.
     */
    static Shape *StaticIn(FILE *inputFile);

    /**
     * Спецификация метода ввода параметров треугольника из файла.
     * Каждая из алтернатив предоставляет свою реализацию данного метода,
     * но суть везде одинакова - инстанцировать данный обьект, используя данные из файла.
     * @param inputFile - входной поток байтов.
     */
    virtual void In(FILE *inputFile) = 0;

    /**
     * Статический метод генерации рандомной алтернативы с рандомными параметрами.
     * Гарантируется, что какая бы алтернатива не была сгенерирована,
     * ее параметры будут отвечать математическим правилам.
     * @return Возвращает сгенерированный обобщенный экземпляр фигуры.
     */
    static Shape *StaticInRnd();

    /**
     * Спецификация метода рандомной генерации альтернативы.
     * Каждая из алтернатив предоставляет свою реализацию данного метода,
     * но целью каждой реализации является одно - инстанцировать рандомными параметрами данную алтернативу.
     */
    virtual void InRnd() = 0;

    /**
     * Спецификация метода вывода информации о вигуре в файл.
     * @param outputFile - файл, в который нужно вывести информацию.
     */
    virtual void Out(FILE *inputFile) = 0;

    /**
     * Спецификация метода вычисления периметра фигуры.
     * @return Результатом является вещественное числа - периметр.
     */
    virtual double Perimeter() = 0;

    /**
     * Геттер для инкапсулированного поля цвета фигуры.
     * Реализация данного метода прописана в файле shape.cpp - это означает,
     * что данный метод напрямую можно вызывать от ссылки асбтрактного класса.
     * @return возвращает цвет данной фигуры.
     */
    Colors GetColor();

    /**
     * Сеттер цвета данной фигуры.
     * Данный метод также принадлежит обьекту асбтрактного класса.
     * Он позволяет установить цвет фигуры.
     * @param color - цвет, который нужно установить.
     */
    void SetColor(Colors color);

    /**
     * Было решено отнести метод написания цвета в файл также к абстрактному классу.
     * Это помогает не копировать один и тот же функционал в различные различных альтернатив.
     * @param outFile
     */
    void WriteColorInFile(FILE *outFile);
};

#endif
