#ifndef __container__
#define __container__
// container.h - содержит тип данных,
// представляющий простейший контейнер

#include <stdio.h>
#include "shape.h"
#include "container.h"
#include "stdlib.h"

/**
 * Класс контейнера.
 * Содержит в себе определения основных полей и функций для работы с коллекцией.
 * Обьект хранит в себе массив ссылок на обобщенные фигуры.
 */
class Container {
public:
    /**
     * Конструктор класса, создает коллекцию обобщенных фигур (10 тысяч ссылок).
     */
    Container();

    /**
     * Деструктор контейнера.
     * Очищает память также и от фигур внутри.
     */
    ~Container();

    /**
     * Ввод коллекции фигур из файла.
     * @param inputFile - файл, из которого присходит считывание.
     */
    void In(FILE *inputFile);

    /**
     * Рандомная генерация содержимого контейнера
     * @param size - количество элементов в колекции, которые необходимо сгенерировать.
     */
    void InRnd(int size);

    /**
     * Вывод содержимого контейнера в файл.
     * @param outputFile - файл, в который нужно вывести данные о фигурах.
     */
    void Out(FILE *outputFile);

    /**
     * Вычиление суммарного периметра всех фигур.
     * @return суммарный периметр.
     */
    double Perimeter();

    /**
     * Удаление всех фигур, периметр которых больше среднего.
     */
    void RemoveAlternativesWithBigPerimeter();

    /**
     * Получить средний периметр фигуры в колекции.
     * @return средний периметр.
     */
    double GetAvaragePerimetr();

private:
    /**
     * Метод очистки контейнера от фигур.
     */
    void Clear();

    // Текущая длина.
    int len;

    // Массив ссылок на фигуры.
    Shape *storage[10001];
};

#endif